<?php

/**
 * @author Waruna Oshan Wisumperuma
 * @contact warunaoshan@gmail.com
 */
class webservicemodel extends Model {

    public function __construct() {
        parent::__construct();
    }

    public function login() {
        $password = $_REQUEST['password'];
        $sql = "SELECT 
    u_first_name,
    u_postal_address,
    tp.idposition
FROM
    tbl_user tu
        inner join
    tbl_position tp ON tu.iduser = tp.iduser
        inner join
    session ON session.idposition_rep = tp.idposition
where
    u_status = 0 and idposition_category = 4
        and session.s_date = curdate() and s_status = 0 
and binary u_login_name = '{$_REQUEST['username']}'
        and binary u_current_password = '{$password}'";
        return $this->db->select($sql);
    }

    public function get_max_session_id() {
        $sql = "SELECT 
    max(idsession) as session_id
FROM
    session
where
    idposition_rep = {$GLOBALS['position_id']} and s_status = 0
        and session.s_date = curdate()";
        $result = $this->db->select($sql);
        return $result[0]->session_id;
    }

    public function userExist() {
        $sql = "SELECT 1 FROM tbl_user where u_login_name = '{$_REQUEST['username']}' limit 1";
        return $this->db->select($sql);
    }

    /*
     * print bill details
     *
     */

    public function getMainDetails() {
        $sql = "select 
                ses.idsession,
                concat_ws(' ',
                        tuag.u_first_name,
                        tuag.u_middle_name,
                        tuag.u_last_name) as agent,
                tuag.u_postal_address as address,
                (select 
                        cn.cn_number
                    from
                        tbl_contact_number cn
                    where
                        cn.iduser = tuag.iduser
                    order by cn.idcontact_number
                    limit 1) as contact_no,tv.vehicle_no
            from
                session ses
                    inner join
                tbl_position tpag ON ses.idposition_agent = tpag.idposition
                    inner join
                tbl_user tuag ON tpag.iduser = tuag.iduser
                    inner join
                tbl_vehicle tv ON ses.id_vehicle = tv.id_vehicle
            where ses.idsession='{$GLOBALS['session_id']}'";
        return $this->db->select($sql);
    }

    public function getAgentName($position) {
        $sql = "SELECT 
    concat(tu.u_title,' ',tu.u_first_name,' ',tu.u_middle_name,' ',tu.u_last_name) as name
FROM
    tbl_position tp
        inner join
    tbl_user tu ON tu.iduser=tp.iduser
where
    tp.idposition = {$position}";
        $agent = $this->db->select($sql);
        return $agent[0]->name;
    }

    public function get_invoice_total() {
        $sql = "SELECT 
    sum(ihi_qty * ihi_unit_price) as inv_tot
FROM
    tbl_invoice ti
        inner join
    tbl_invoice_has_item tihi ON ti.idinvoice = tihi.idinvoice
where
    ti.idsession = {$GLOBALS['session_id']} and i_status = 0";
        $result = $this->db->select($sql);
        return empty($result[0]->inv_tot) ? 0 : $result[0]->inv_tot;
    }

    public function get_cash_amount() {
        $sql = "SELECT 
    sum(tpm.pm_amount) as cash_amount
FROM
    tbl_payment_method tpm
where
    tpm.idpayment_type = 1
        and tpm.idsession = {$GLOBALS['session_id']}
        and tpm.pm_status = 0";
        $result = $this->db->select($sql);
        return empty($result[0]->cash_amount) ? 0 : $result[0]->cash_amount;
    }

    public function get_cheque_total() {
        $sql = "SELECT 
    sum(tpm.pm_amount) as cheque_amount
FROM
    tbl_payment_method tpm
where
    tpm.idpayment_type = 2
        and tpm.idsession = {$GLOBALS['session_id']}
        and tpm.pm_status = 0";
        $result = $this->db->select($sql);
        return empty($result[0]->cheque_amount) ? 0 : $result[0]->cheque_amount;
    }

    public function getProductCats() {
        return $this->db->select('SELECT iditem_category_type,ict_name FROM tbl_item_category_type');
    }

    public function getProducts() {
        $sql = 'SELECT 
    iditem, item_name, item_photo
FROM
    tbl_item';
        return $this->db->select($sql);
    }

    public function getOutCats() {
        return $this->db->select('SELECT idoutlet_category,oc_name FROM tbl_outlet_category');
    }

    public function getItem_cat_Rel() {
        return $this->db->select("SELECT iditemhascat,iditem,iditemcat FROM tbl_item_has_categoy where status=0");
    }

    public function getPrice() {
        $msi = $_POST['session_id'];
        //$this->get_max_session_id();
        $query = "SELECT 
    iditem_price,
    iditem_has_cat,
    idoutlet_category as idoutlet_category,
    tihc.iditem,
    if(tihc.iditemcat != 2,
        ip_price,
        ip_price - ifnull((select 
                        ip_price
                    from
                        tbl_item_price rtip
                            inner join
                        (select 
                            max(iditem_price) as maxip, idoutlet_category, dtihc.iditem
                        from
                            tbl_item_price dtip
                        inner join tbl_item_has_categoy dtihc ON dtip.iditem_has_cat = dtihc.iditemhascat
                        where
                            idzone = (select 
                                    tz3.idzone
                                from
                                    session ses
                                inner join tbl_zone tz ON ses.s_idzone = tz.idzone
                                inner join tbl_zone tz1 ON tz.idzone_parent = tz1.idzone
                                inner join tbl_zone tz2 ON tz1.idzone_parent = tz2.idzone
                                inner join tbl_zone tz3 ON tz2.idzone_parent = tz3.idzone
                                where
                                    ses.idsession = $msi)
                                and dtihc.iditemcat = 3
                        group by iditem_has_cat , idoutlet_category , idzone) as maxp ON maxp.maxip = rtip.iditem_price
                    where
                        maxp.idoutlet_category = tip.idoutlet_category
                            and maxp.iditem = tihc.iditem),
                0)) as ip_price
FROM
    tbl_item_price tip
        inner join
    (SELECT 
        idzone_parent
    FROM
        session
    inner join tbl_position_has_zone tphz ON session.idposition_agent = tphz.idposition
    inner join tbl_zone ON tbl_zone.idzone = tphz.idzone
    where
        idposition_rep = {$GLOBALS['position_id']}
    order by idsession desc
    limit 1) as tmp ON tmp.idzone_parent = tip.idzone
        inner join
    (select 
        max(iditem_price) as maxip
    from
        tbl_item_price
    group by iditem_has_cat , idoutlet_category , idzone) as maxp ON maxp.maxip = tip.iditem_price
        inner join
    tbl_item_has_categoy tihc ON tihc.iditemhascat = tip.iditem_has_cat";
        return $this->db->select($query);
    }

    public function getOutlets() {
        $sql = "SELECT 
    ts.idstore as outletId,
    o_name as outlet,
    ts.idzone as routeId,
    tolt.idoutlet_category,
    o_address,
    o_name as o_person_name,
    0 as o_contact,
    ifnull(o_mobile, 0) as o_mobile,
    trust_cylinder,
    credit_period,
    ifnull(credit_limit, 0) credit_limit,
    ifnull(credit_amount, 0) credit_amount,
    ifnull(buffer_limit, 0) buffer_limit,lat,lng
FROM
    tbl_outlet tolt
        inner join
    tbl_outlet_category toc ON tolt.idoutlet_category = toc.idoutlet_category
        inner join
    tbl_store ts ON ts.idoutlet = tolt.idoutlet
        inner join
    tbl_zone tz ON tz.idzone = ts.idzone
        inner join
    tbl_position_has_zone tphz ON tphz.idzone = tz.idzone_parent
        left join
    tbl_credit_limit tcl ON tolt.idoutlet = tcl.idoutlet
where
    tphz.idposition = {$GLOBALS['position_id']} and o_active = 1";
        return $this->db->select($sql);
    }

    public function getRoute() {
        $sql = "SELECT 
    tz.idzone as areaId, tz.z_name as area
FROM
    tbl_position_has_zone tphz
        inner join
    tbl_zone tz ON tphz.idzone = tz.idzone_parent
where idzone_type=5 and 
    tphz.idposition = {$GLOBALS['position_id']}";
        return $this->db->select($sql);
    }

    public function getBanks() {
        return $this->db->select("SELECT 
    idbank_branch, b_name, b_code, bb_name, bb_code
FROM
    tbl_bank
        inner join
    tbl_bank_branch ON tbl_bank.idbank = tbl_bank_branch.idbank");
    }

    public function set_unproductive_outlet($jsn) {
        $data = array('id_outlet' => $jsn->outlet_id, 'id_session' => $GLOBALS['position_id'], 'latitude' => $jsn->latitude, 'longitude' => $jsn->longitude, 'date' => $jsn->date, 'url' => date('Y') . '/' . date('m') . '/' . date('d') . '/' . $_FILES['photo']['name']);
        return $this->db->insertData('unproductive_outlet', $data);
    }

    public function set_customer($fargs) {
        $this->db->__beginTransaction();
        /**
         * olt add
         */
        $olt = array('o_name' => $fargs['companyname'], 'o_person_name' => $fargs['contactperson'], 'o_address' => $fargs['address'], 'o_mobile' => $fargs['tel'], 'idoutlet_category' => $fargs['outlet_cat_id'], 'o_has_cooler' => 0, 'o_free' => 0, 'o_discount' => 1, 'o_contact' => '', 'o_photograph_url' => '', 'o_status' => 2);
        $this->db->insertData('tbl_outlet', $olt);
        $outletid = $this->db->insertId();
        /**
         * olt discount
         */
        $this->db->insertData('tbl_outlet_discount', array('od_rate' => 0, 'idoutlet' => $outletid));
        /**
         * olt store
         */
        $this->db->insertData('tbl_store', array('idoutlet' => $outletid, 'idzone' => $fargs['routeid']));
        /**
         * olt temp
         */
        $temp = array('temp_od_date' => date('Y-m-d'), 'temp_od_time' => date('H:i:s'), 'id_outlet' => $outletid, 'id_position' => $GLOBALS['position_id'], 'id_zone' => $fargs['routeid'], 'temp_od_status' => 0);
        $this->db->insertData('tbl_outlet_temp_details', $temp);
        return $this->db->__endTransaction();
    }

    public function insert_order($jsonString) {
        $this->db->__beginTransaction();
        $msi = $_POST['session_id'];
        //$this->get_max_session_id();
        /**
         * insert cur_stock
         */
        $date = new DateTime($jsonString['INVOICE']['timestamp']);
        /**
         * insert invoice
         */
        $this->db->insertData('tbl_invoice', array('i_date' => $date->format('Y-m-d'), 'i_time' => $date->format('H:i:s'), 'idstore' => $jsonString['INVOICE']['out_id'], 'idsession' => $msi, 'i_code' => 0));
        $inv_id = $this->db->insertId();
        /**
         * insert stock
         */
        $this->db->insertData('tbl_stock_count', array('sc_date' => $date->format('Y-m-d'), 'sc_time' => $date->format('H:i:s'), 'idsession' => $msi, 'id_store' => $jsonString['INVOICE']['out_id']));
        $stock_id = $this->db->insertId();
        $stock_itms = array();
        foreach ($jsonString['cur_stock'] as $value) {
            //Empty
            $stock_itms[] = array('iditemhascat' => "SELECT `iditemhascat` FROM `tbl_item_has_categoy` WHERE `iditem`={$value['Item_id']} and `iditemcat`=3", 'schi_qty' => $value['Empty_qty'], 'idstock_count' => $stock_id);
            //Fill
            $stock_itms[] = array('iditemhascat' => "SELECT `iditemhascat` FROM `tbl_item_has_categoy` WHERE `iditem`={$value['Item_id']} and `iditemcat`=4", 'schi_qty' => $value['Filled_qty'], 'idstock_count' => $stock_id);
        }
        $this->db->insertPacket('tbl_stock_count_has_item', $stock_itms);
        /**
         * insert return
         */
        $ret = array();
        foreach ($jsonString['dam_stock'] as $value) {
            $ret[] = array('tbl_invoice_idinvoice' => $inv_id, 'iditem_returned' => $value['item_id'], 'ihri_qty' => 1, 'ihri_price' => $value['price'], 'ihri_isreturned' => '', 'iditemcat' => 6, 'cap' => $value['cap_avail'] == 'YES' ? 1 : 0, 'seal' => $value['seal_avail'] == 'YES' ? 1 : 0, 'weight' => $value['cur_weight']);
        }
        if (!empty($ret)) {
            $this->db->insertPacket('tbl_invoice_has_return_item', $ret);
        }
        /**
         * insert new
         */
        $new = array();
        $empty = array();
        foreach ($jsonString['REFILL'] as $value) {
            $new[] = array('idinvoice' => $inv_id, 'iditem' => $value['item_id'], 'ihi_qty' => $value['qty'], 'ihi_unit_price' => $value['price'], 'iditemcat' => $value['cat_id']);
            // invoice empty
            $empty[] = array('tbl_invoice_idinvoice' => $inv_id, 'tbl_item_iditem' => $value['item_id'], 'ihei_qty' => $value['qty'], 'ihei_price' => 0//$priceCal($value['item_id'], 3)
            );
        }
        /**
         * insert empty
         */
        if (!empty($empty)) {
            $this->db->insertPacket('tbl_invoice_has_empty_item', $empty);
        }
        foreach ($jsonString['NEW'] as $value) {
            $new[] = array('idinvoice' => $inv_id, 'iditem' => $value['item_id'], 'ihi_qty' => $value['qty'], 'ihi_unit_price' => $value['price'], 'iditemcat' => $value['cat_id']);
        }
        $this->db->insertPacket('tbl_invoice_has_item', $new);
        /**
         * insert gps
         */
        $this->db->insertData('gpsinfo', array('idinvoice' => $inv_id, 'lat' => $jsonString['INVOICE']['latitude'], 'lon' => $jsonString['INVOICE']['longitude'], 'btrlevel' => $jsonString['INVOICE']['bat_level'], 'synctimestamp' => $jsonString['INVOICE']['timestamp']));
        /**
         * payment
         */
        $pm = $jsonString['Payment'];
        $Pdata = array('idsession' => $msi, 'idinvoice' => $inv_id, 'pm_date' => $date->format('Y-m-d'), 'pm_time' => $date->format('H:i:s'), 'pm_status' => 0);
        foreach ($pm as $p) {
            $data = $Pdata;
            switch ($p['type']) {
                case 'cash' :
                    $data['pm_amount'] = $p['cash_amount'];
                    $data['idpayment_type'] = 1;
                    $this->db->insertData('tbl_payment_method', $data);
                    break;
                case 'cheque' :
                    $this->db->insertData('tbl_payment_cheque', array('pc_date' => $p['cheque_date'], 'pc_no' => $p['cheque_no'], 'pc_amount' => $p['cheque_amount'], 'idbank_branch' => $p['banck_branch_id']));
                    $data['pm_amount'] = $p['paying_amount'];
                    $data['idpayment_type'] = 2;
                    $data['idpayment_cheque'] = $this->db->insertId();
                    $this->db->insertData('tbl_payment_method', $data);
                    break;
            }
        }
        $this->db->__endTransaction();
        return $this->db->status();
    }

    public function getTrustnDamage() {
        $msi = $_POST['session_id'];
        //$this->get_max_session_id();
        return $this->db->select("SELECT 
    ti.idinvoice,
    ti.idstore,
    ti.i_code,
    tihi.iditem,
    tihi.ihi_qty,
    tihi.iditemcat
FROM
    tbl_invoice ti
        inner join
    tbl_invoice_has_item tihi ON tihi.idinvoice = ti.idinvoice
where
    ti.i_code = 'trust' and ti.idsession = $msi 
union all SELECT 
    ti.idinvoice,
    ti.idstore,
    ti.i_code,
    tihi.iditem,
    tihi.ihi_qty,
    tihi.iditemcat
FROM
    tbl_invoice ti
        inner join
    tbl_invoice_has_item tihi ON tihi.idinvoice = ti.idinvoice
where
    ti.i_code = 'damage'
        and ti.idsession = $msi");
    }

    public function getStock() {
        $msi = $_POST['session_id'];
        //$this->get_max_session_id();
        $query = "SELECT 
    iditem, iditemcat, sst_qty
from
    tbl_session_stock_transfer tsst
where
    tsst.sst_status = 'load'
        and tsst.idsession = $msi";
        return $this->db->select($query);
    }

    public function get_last3Bills() {
        $result = array('result' => 1);
        $data = array();
        $olts = "SELECT 
    tstor.idstore
FROM
    tbl_zone tz
        inner join
    tbl_position_has_zone tphz ON tphz.idzone = tz.idzone_parent
        inner join
    tbl_store tstor ON tstor.idzone = tz.idzone
where
    tphz.idposition = {$GLOBALS['position_id']}";
        $olt_result = $this->db->select($olts);
        foreach ($olt_result as $olt) {
            $inv_query = "SELECT 
    ti.idinvoice,
    ti.i_date,
    ti.i_time,
    (sum(tihi.ihi_qty * tihi.ihi_unit_price) * (100 - ti.i_discount)) / 100 as amount
FROM
    tbl_invoice ti
        inner join
    tbl_invoice_has_item tihi ON ti.idinvoice = tihi.idinvoice
where
    ti.i_status = 0 and ti.idstore = {$olt->idstore}
group by ti.idinvoice
order by DATE_FORMAT(concat(ti.i_date, ' ', ti.i_time),
        '%Y-%m-%d %H:%i:%s') desc limit 3";
            $inv_result = $this->db->select($inv_query);
            foreach ($inv_result as $inv) {
                $inv_d = "SELECT 
    idpayment_type, sum(tpm.pm_amount) as amount
FROM
    tbl_payment_method tpm
where
    tpm.idinvoice = {$inv->idinvoice}";
                $res_inv = $this->db->select($inv_d);
                if ($res_inv[0]->amount) {
                    $invoice = array();
                    $invoice['id'] = $inv->idinvoice;
                    $invoice['date'] = $inv->i_date . ' ' . $inv->i_time;
                    $invoice['amount'] = $inv->amount;
                    $invoice['idstore'] = $olt->idstore;
                    $invoice['paid'] = $res_inv[0]->amount;
                    $data[] = $invoice;
                }
            }
        }
        $result['data'] = $data;
        return $result;
    }

    public function setMyPosition() {
        $jsn = json_decode($_POST['jsonString']);
        $lo = $jsn->location_data;
        foreach ($lo as $j) {
            $this->db->insertData('repGeoPosition', array('idposition' => $GLOBALS['position_id'], 'lat' => $j->gps_latitude, 'lon' => $j->gps_longitude, 'btrlevel' => $j->battry_level, 'synctimestamp' => $j->timestamp));
        }
        return $this->db->status();
    }

    public function setStockUnloadConfirm() {
        $mxsid = $_POST['session_id'];
        //$this->get_max_session_id();
        $this->db->__beginTransaction();
        //        $data = json_decode($_POST['data']);
        //        $und = array();
        //        foreach ($data as $d) {
        //            $und[] = array(
        //                'idsession' => $mxsid,
        //                'iditem' => $d->itemId,
        //                'sst_qty' => $d->qty,
        //                'sst_price' => $d->price,
        //                'sst_type' => 'unload'
        //            );
        //        }
        //        $this->db->insertPacket('tbl_session_stock_transfer', $und);
        $this->db->update('session', array('s_status' => 1), array('idsession' => $mxsid));
        $this->db->__endTransaction();
        return $this->db->status() ? array('result' => 1) : array('result' => 0);
    }

    public function setStockLoadConfirm() {
        $mxsid = $_POST['session_id'];
        //$this->get_max_session_id();
        $this->db->update('session', array('s_load_stock_confirm' => 1), array('idsession' => $mxsid));
        return $this->db->status() ? array('result' => 1) : array('result' => 0);
    }

    public function outletCapture($dealer) {
        $sql = "UPDATE tbl_outlet 
SET 
    o_photograph_url = '{$dealer->filename}',
    o_address = '{$dealer->dealer_address}',
    o_contact = '{$dealer->dealer_contact}',
    lat = '{$dealer->lat}',
    lng = '{$dealer->lon}'
WHERE
    idoutlet = (SELECT 
            idoutlet
        FROM
            tbl_store
        WHERE
            idstore = {$dealer->dealer_id}) limit 1";
        $this->db->doQuery($sql);
    }

    public function checkSession() {
        $sql = "SELECT 
    1
FROM
    session
where
    idsession = {$_POST['session_id']} and s_status = 0 and s_date = curdate()";
        $sth = $this->db->prepare($sql);
        $sth->execute();
        return ($sth->rowCount() > 0) ? TRUE : FALSE;
    }

    public function getPriceByOutlet() {
        $sql = "SELECT 
    tohp.idoutlet_price,
    tohp.iditemhascat,
    tohp.idoutlet,
    tohp.price
FROM
    (SELECT STRAIGHT_JOIN
        max(tohpp.idoutlet_price) as 'idoutlet_price'
    FROM
        tbl_position_has_zone tphz
    inner join tbl_zone tz ON tphz.idzone = tz.idzone_parent
    inner join tbl_store ts ON ts.idzone = tz.idzone
    inner join tbl_outlet tolt ON ts.idoutlet = tolt.idoutlet
    inner join tbl_outlet_has_price tohpp ON tolt.idoutlet = tohpp.idoutlet
    where
        tohpp.ohp_status = 0
            and tphz.idposition = {$GLOBALS['position_id']}
            and tolt.o_active = 1
    group by tohpp.idoutlet , tohpp.iditemhascat) tmp
        STRAIGHT_JOIN
    tbl_outlet_has_price tohp ON tmp.idoutlet_price = tohp.idoutlet_price";
        return $this->db->select($sql);
    }

    function makeOutStandingPayment() {
        $this->db->__beginTransaction();
        $json = json_encode($_POST['Payment']);
        foreach ($json as $j) {
            $date = new DateTime($j->timestamp);
            $data = array(
                'idsession' => $_POST['session_id'],
                'idinvoice' => $j->idinvoice,
                'pm_date' => $date->format('Y-m-d'),
                'pm_time' => $date->format('H:i:s'),
                'pm_status' => 0
            );
            switch ($j->type) {
                case 'cash' :
                    $data['pm_amount'] = $j->cash_amount;
                    $data['idpayment_type'] = 1;
                    $this->db->insertData('tbl_payment_method', $data);
                    break;
                case 'cheque' :
                    $this->db->insertData('tbl_payment_cheque', array(
                        'pc_date' => $j->cheque_date,
                        'pc_no' => $j->cheque_no,
                        'pc_amount' => $j->cheque_amount,
                        'idbank_branch' => $j->banck_branch_id
                            )
                    );
                    $data['pm_amount'] = $j->paying_amount;
                    $data['idpayment_type'] = 2;
                    $data['idpayment_cheque'] = $this->db->insertId();
                    $this->db->insertData('tbl_payment_method', $data);
                    break;
            }
        }
        $this->db->__endTransaction();
        return $this->db->status() ? 1 : 0;
    }

    public function insert_pre_order($jsonString, $position) {
        $pre_order = $jsonString->preOder;
        $store_id = $this->load_store($pre_order->out_id);
        $timestamp = new DateTime($pre_order->timestamp);
        $date = $timestamp->format('Y-m-d');
        $time = $timestamp->format('H:i:s');
        $this->db->__beginTransaction();
        $this->db->insertData('tbl_sales_order', array('id_position' => $position, 'idstore' => $store_id, 'sales_order_status' => 0, 'deliver_date' => $pre_order->deliver_date, 'added_date' => $date, 'added_time' => $time));
        $sales_id = $this->db->insertId();
        $new = array();
        foreach ($jsonString->pre_order_item as $value) {
            $new[] = array('idsales_order' => $sales_id, 'id_item' => $value->item_id, 'iditemcat' => $value->item_cat_id, 'qty' => $value->qty, 'status' => 0, 'added_date' => $date);
        }
        $this->db->insertPacket('tbl_sales_order_has_item', $new);
        $this->db->__endTransaction();
        return $this->db->status();
    }

    public function load_store($id_out) {
        $sql = "select 
    ts.idstore
from
    tbl_outlet tu
        inner join
    tbl_store ts on tu.idoutlet=ts.idoutlet
where 
tu.idoutlet=$id_out";
        $res = $this->db->select($sql);
        return $res[0]->idstore;
    }

    public function insert_end_day_status($jsonString, $position, $session_id) {
        $this->db->__beginTransaction();
        $this->db->insertData('tbl_session_unload', array('idSession' => $session_id, 'idPosition' => $position, 'su_date' => date("Y-m-d"), 'su_time' => date('G:i:s'), 'su_status' => 0));
        $unload_id = $this->db->insertId();
        $new = array();
        foreach ($jsonString->lorry_stock as $value) {
            $new[] = array('idSession_unload' => $unload_id, 'idItem' => $value->item_id, 'item_qty' => $value->available_qty, 'iditemcat' => $value->item_cat_id);
        }
        $this->db->insertPacket('tbl_session_unload_details', $new);
        $this->db->update('session', array('s_status' => 1), array('idsession' => $session_id));
        $this->db->__endTransaction();
        return $this->db->status();
    }

    public function getDailyDeliveries() {
        $sql = "select 
so.id_sales_order, ts.idoutlet
from
tbl_store ts
inner join
tbl_sales_order so ON ts.idstore = so.idstore
inner join
tbl_sales_order_has_item soi ON so.id_sales_order = soi.idsales_order
where
so.sales_order_status = 0
and so.deliver_date = (select CURDATE())
and so.id_position = {$GLOBALS['position_id']}";
        return $this->db->select($sql);
    }
    public function getDailyDeliverie_items() {
        $sql = "select 
    so.id_sales_order,
soi.id_item,
soi.iditemcat,
soi.qty
from

    tbl_sales_order so 
        inner join
    tbl_sales_order_has_item soi ON so.id_sales_order = soi.idsales_order
where
    so.sales_order_status = 0
        and so.deliver_date = (select CURDATE())
        and so.id_position = {$GLOBALS['position_id']}
and soi.status=0
";
        return $this->db->select($sql);
    }

}
